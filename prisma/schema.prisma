generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roleId    Int      @default(2)

  role Role? @relation(fields: [roleId], references: [id])

  Post                Post[]
  ProConVote          ProConVote[]
  Comment             Comment[]
  CommentLike         CommentLike[]
  PostLike            PostLike[]
  CommentDislike      CommentDislike[]
  CommentNotification CommentNotification[]
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  RolePermission RolePermission[]
  User           User[]
}

model Permission {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RolePermission RolePermission[]
}

model RolePermission {
  id           Int      @id @default(autoincrement())
  roleId       Int
  permissionId Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model Book {
  id          Int      @id @default(autoincrement())
  isbn        String   @unique
  title       String
  author      String
  translator  String?
  description String
  link        String
  cover       String
  publisher   String
  pubdate     DateTime
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  BookDiscussion BookDiscussion[]
}

model Post {
  id        Int      @id @default(autoincrement())
  authorId  Int
  title     String
  content   String
  views     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User             User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Comment          Comment[]
  CommentLike      CommentLike[]
  BookDiscussion   BookDiscussion?
  ProConDiscussion ProConDiscussion?
  CommentDislike   CommentDislike[]
  PostLike         PostLike[]

  // @@fulltext([title])
}

model BookDiscussion {
  id        Int      @id @default(autoincrement())
  postId    Int      @unique
  bookId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  Book Book @relation(fields: [bookId], references: [id])
}

model ProConDiscussion {
  id        Int      @id @default(autoincrement())
  postId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  ProConVote ProConVote[]
}

model ProConVote {
  id                 Int      @id @default(autoincrement())
  userId             Int
  proConDiscussionId Int
  isPro              Boolean
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  ProConDiscussion ProConDiscussion @relation(fields: [proConDiscussionId], references: [id], onDelete: Cascade)
  User             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, proConDiscussionId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  authorId  Int
  postId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  CommentLike         CommentLike[]
  CommentDislike      CommentDislike[]
  CommentNotification CommentNotification[]
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  postId    Int?
  userId    Int
  commentId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  Post    Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model CommentDislike {
  id        Int      @id @default(autoincrement())
  postId    Int?
  userId    Int
  commentId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  Post    Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model PostLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model CommentNotification {
  id         Int      @id @default(autoincrement())
  userId     Int
  commentId  Int
  readStatus Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}
